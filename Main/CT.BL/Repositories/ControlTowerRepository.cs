using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CT.Common.IRepositories;
using CT.Common.DTO_Models;
using CT.Common.Utilities;
using CT.Common.Abstracts;
using CT.DAL.Entities;
using CT.DAL;
using System.Windows.Controls;
using CT.Common.Enums;

namespace CT.BL.Repositories
{
    /// <summary>
    /// The CT app's repo class that inherits from repo converter & implemets the repo interface
    /// </summary>
    public class ControlTowerRepository : RepositoryConvertor<Flight, FlightDTO>, IControlTowerRepository
    {
        #region props & ctor
        public CTContext CTDB { get; private set; }
        public ICollection<ProcessDTO> ProcessesDTOs { get; set; }
        public ICollection<CheckpointDTO> CheckPointsDTOs { get; set; }
        public ICollection<FlightDTO> FlightsDTOs { get; set; }

        public ControlTowerRepository()
        {
            CTDB = new CTContext();
            ProcessesDTOs = new List<ProcessDTO>();
            CheckPointsDTOs = new List<CheckpointDTO>();
            FlightsDTOs = new List<FlightDTO>();
        }
        #endregion

        #region service related operations
        /// <summary>
        /// Create a flight model with default values in DB
        /// </summary>
        /// <param name="flightSerial">the random serial generated by the timing system</param>
        /// <returns>the created flight object</returns>
        public FlightDTO CreateFlightObject(int flightSerial)
        {
            //creates a local process object of type landing
            ProcessDTO process = new ProcessDTO()
            {
                ProcessType = CTDB.GetProcess(ProcessType.LandingProcess.ToString()).ProcessType,
                ProcessId = CTDB.GetProcess(ProcessType.LandingProcess.ToString()).ProcessId,
                Flights = new List<FlightDTO>()
            };
            //creates the process's checkpoints
            foreach (Checkpoint cp in CTDB.GetProcess(ProcessType.LandingProcess.ToString()).Checkpoints)
            {
                process.Checkpoints.Add(new CheckpointDTO()
                {
                    CheckpointType = cp.CheckpointType,
                    CheckpointId = cp.CheckpointId,
                    Process = process,
                    ProcessId = cp.ProcessId,
                    Duration = cp.Duration,
                    Serial = cp.Serial,
                    Flights = new List<FlightDTO>()
                });
            }
            //creates the flight in the landing process
            FlightDTO flight = new FlightDTO()
            {
                FlightSerial = flightSerial,
                IsAlive = false,
                Process = process,
                ProcessId = process.ProcessId
            };
            //adds flight to the repo's flight list
            FlightsDTOs.Add(flight);
            //returns the created flight after updated in DB
            return flight = ConvertToDTO(CTDB.CreateFlight(ConvertToEntity(flight)));
        }

        /// <summary>
        /// Gets a specified flight object by flight serial
        /// </summary>
        /// <param name="flightSerial">the requested serial</param>
        /// <returns>the requested flight object</returns>
        public FlightDTO GetFlightObject(int flightSerial)
        {
            return ConvertToDTO(CTDB.GetFlight(flightSerial));
        }

        /// <summary>
        /// Gets all current alive flights in the CT app
        /// </summary>
        /// <returns>the flights list</returns>
        public ICollection<FlightDTO> GetFlightsCollection()
        {
            ICollection<FlightDTO> flights = new List<FlightDTO>();
            foreach (Flight flight in CTDB.Flights)
            {
                flights.Add(ConvertToDTO(flight));
            }
            return flights;
        }

        /// <summary>
        /// Updates the associated checkpoint's flight list with the flight object
        /// </summary>
        /// <param name="newCheckpointSerial">the flight's next checkpoint serial</param>
        /// <param name="checkpointPosition">the current flight's position as a TextBlock name property</param>
        /// <param name="checkpointSerial">the current flight's checkpoint serial</param>
        /// <param name="flight">the associated flight object</param>
        /// <returns>string format for the flight's next checkpoint type</returns>
        public string UpdateCheckpoints(int newCheckpointSerial, string lastCheckpointPosition, int lastCheckpointSerial, FlightDTO flight)
        {
            //if the previous checkpoint's control name's value is the following action
            if (lastCheckpointPosition == "none")
            {
                //updates the flight in DB as a new flight
                UpdateFlightObject(flight, newCheckpointSerial, lastCheckpointSerial, true);
                //returns the first checkpoint's type
                return CheckpointType.Landing.ToString();
            }
            //if the flight is not new, updates the checkpoint the flight passes between
            CTDB.UpdateCheckpoint(newCheckpointSerial, lastCheckpointSerial, ConvertToEntity(flight));
            //returns the next checkpoint type by the last checkpoint's control name
            if (lastCheckpointPosition == "txtblckFlightArr3") return CheckpointType.RunwayLanded.ToString();
            else if (lastCheckpointPosition == "lstvwParkDepart") return CheckpointType.RunwayDeparting.ToString();
            ////returns the next checkpoint type of the current flight's checkpoint type
            else return CTDB.Flights.FirstOrDefault(f => f.FlightSerial == flight.FlightSerial).Checkpoint.CheckpointType.ToString();
        }

        /// <summary>
        /// Updates the flight object's checkpoint
        /// </summary>
        /// <param name="flight">the current flight object</param>
        /// <param name="newCheckpointSerial">the next checkpoint's serial</param>
        /// <param name="lastCheckpointSerial">the last checkpoint's serial</param>
        /// <param name="isNew">indicates if the flight is new or not</param>
        public void UpdateFlightObject(FlightDTO flight, int newCheckpointSerial, int lastCheckpointSerial, bool isNew)
        {
            CTDB.UpdateFlight(ConvertToEntity(flight), newCheckpointSerial, lastCheckpointSerial, isNew);
        }

        /// <summary>
        /// Retrieves a checkpoint's TextBlock control name property by a flight object
        /// </summary>
        /// <param name="textBlocks">The UI list of TextBlock controls</param>
        /// <param name="flightSerial">The flight serial to retrieve it's current checkpoint</param>
        /// <param name="checkpointSerial">out ref of the checkpoint serial</param>
        /// <returns>Returns a string format for the flight's checkpoint position represented as the TextBlock control name property)</returns>
        public string GetFlightCheckpoint(Dictionary<string, string> txtblckNameFlightNumber, Dictionary<string, List<string>> lstvwNameFlightsList,
            string flightSerial, bool isBoarding, out int checkpointSerial)
        {
            string txtblckName = default(string);
            try { txtblckName = txtblckNameFlightNumber.Keys.FirstOrDefault(blockName => txtblckNameFlightNumber[blockName] == flightSerial); }
            catch { }

            checkpointSerial = -1;
            if (txtblckName == null)
            {
                string lstvwName = lstvwNameFlightsList.Keys.FirstOrDefault(listName => lstvwNameFlightsList[listName].Contains(flightSerial));
                if (lstvwName == "lstvwParkUnload") checkpointSerial = 5;
                else if (lstvwName == "lstvwParkDepart") checkpointSerial = 8;
                else if (lstvwName == null) return "none";
                return lstvwName;
            }
            switch (txtblckName)
            {
                case "txtblckFlightArr1":
                    checkpointSerial = 1;
                    return txtblckName;
                case "txtblckFlightArr2":
                    checkpointSerial = 2;
                    return txtblckName;
                case "txtblckFlightArr3":
                    checkpointSerial = 3;
                    return txtblckName;
                case "txtblckFlightRunway":
                    checkpointSerial = 4;
                    return txtblckName;
                case "txtblckFlightTerminal1":
                    if (isBoarding) checkpointSerial = 7;
                    else checkpointSerial = 6;
                    return txtblckName;
                case "txtblckFlightTerminal2":
                    if (isBoarding) checkpointSerial = 7;
                    else checkpointSerial = 6;
                    return txtblckName;
                case "txtblckFlightDepart":
                    checkpointSerial = 9;
                    return txtblckName;
                default: return txtblckName;
            }
        }

        public CheckpointDTO GetCheckpoint(string checkpointSerial, string checkpointType)
        {
            int serial = default(int);
            int.TryParse(checkpointSerial, out serial);
            return new CheckpointDTO()
            { Duration = CTDB.GetCheckpoint(serial).Duration };
        }

        public bool DisposeFlight(int flightSerial)
        {
            return CTDB.DisposeFlight(flightSerial);
        }

        public void InitializeDatabase()
        {
            try
            {
                CTDB.InitializeDatabase();
            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }
            FlightsDTOs.Clear();
        }
        #endregion

        #region converter protected methods
        protected override FlightDTO ConvertToDTO(Flight entity)
        {
            if (entity == null) return null;
            FlightDTO flight = new FlightDTO()
            {
                FlightSerial = entity.FlightSerial,
                IsAlive = entity.IsAlive
            };
            if (entity.Checkpoint != null)
            {
                flight.Checkpoint = new CheckpointDTO()
                {
                    CheckpointType = entity.Checkpoint.CheckpointType,
                    CheckpointId = entity.Checkpoint.CheckpointId,
                    Duration = entity.Checkpoint.Duration,
                    Serial = entity.Checkpoint.Serial,
                    Process = new ProcessDTO() { ProcessType = entity.Checkpoint.Process.ProcessType, ProcessId = entity.Checkpoint.Process.ProcessId },
                    ProcessId = entity.Checkpoint.Process.ProcessId
                };
                flight.CheckpointId = entity.Checkpoint.CheckpointId;
                flight.Process = flight.Checkpoint.Process;
                flight.ProcessId = flight.Checkpoint.ProcessId;
            }
            return flight;
        }
        protected override Flight ConvertToEntity(FlightDTO dto)
        {
            Flight flight = new Flight()
            {
                FlightSerial = dto.FlightSerial,
                IsAlive = dto.IsAlive
            };
            if (dto.Checkpoint != null)
            {
                flight.Checkpoint = CTDB.GetCheckpoint(dto.Checkpoint.Serial);
                flight.CheckpointId = CTDB.GetCheckpoint(dto.Checkpoint.Serial).CheckpointId;
            }
            return flight;
        }
        #endregion
    }
}
