//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CT.SRV.SimulatorServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseBase", Namespace="http://schemas.datacontract.org/2004/07/CT.Common.Abstracts")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(CT.Contracts.SimDataContracts.ResponseFlightsCollection))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(CT.Contracts.SimDataContracts.ResponseFlightObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(CT.Contracts.SimDataContracts.ResponseInitializeSimulator))]
    public partial class ResponseBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSuccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FlightDTO", Namespace="http://schemas.datacontract.org/2004/07/CT.Common.DTO_Models")]
    [System.SerializableAttribute()]
    public partial class FlightDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CT.SRV.SimulatorServiceReference.CheckpointDTO CheckpointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CheckpointIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FlightIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FlightSerialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAliveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CT.SRV.SimulatorServiceReference.ProcessDTO ProcessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProcessIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CT.SRV.SimulatorServiceReference.CheckpointDTO Checkpoint {
            get {
                return this.CheckpointField;
            }
            set {
                if ((object.ReferenceEquals(this.CheckpointField, value) != true)) {
                    this.CheckpointField = value;
                    this.RaisePropertyChanged("Checkpoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CheckpointId {
            get {
                return this.CheckpointIdField;
            }
            set {
                if ((this.CheckpointIdField.Equals(value) != true)) {
                    this.CheckpointIdField = value;
                    this.RaisePropertyChanged("CheckpointId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FlightId {
            get {
                return this.FlightIdField;
            }
            set {
                if ((this.FlightIdField.Equals(value) != true)) {
                    this.FlightIdField = value;
                    this.RaisePropertyChanged("FlightId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FlightSerial {
            get {
                return this.FlightSerialField;
            }
            set {
                if ((this.FlightSerialField.Equals(value) != true)) {
                    this.FlightSerialField = value;
                    this.RaisePropertyChanged("FlightSerial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAlive {
            get {
                return this.IsAliveField;
            }
            set {
                if ((this.IsAliveField.Equals(value) != true)) {
                    this.IsAliveField = value;
                    this.RaisePropertyChanged("IsAlive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CT.SRV.SimulatorServiceReference.ProcessDTO Process {
            get {
                return this.ProcessField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessField, value) != true)) {
                    this.ProcessField = value;
                    this.RaisePropertyChanged("Process");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProcessId {
            get {
                return this.ProcessIdField;
            }
            set {
                if ((this.ProcessIdField.Equals(value) != true)) {
                    this.ProcessIdField = value;
                    this.RaisePropertyChanged("ProcessId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CheckpointDTO", Namespace="http://schemas.datacontract.org/2004/07/CT.Common.DTO_Models")]
    [System.SerializableAttribute()]
    public partial class CheckpointDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CheckpointIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CheckpointTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CT.SRV.SimulatorServiceReference.FlightDTO[] FlightsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CT.SRV.SimulatorServiceReference.ProcessDTO ProcessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProcessIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SerialField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CheckpointId {
            get {
                return this.CheckpointIdField;
            }
            set {
                if ((this.CheckpointIdField.Equals(value) != true)) {
                    this.CheckpointIdField = value;
                    this.RaisePropertyChanged("CheckpointId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CheckpointType {
            get {
                return this.CheckpointTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.CheckpointTypeField, value) != true)) {
                    this.CheckpointTypeField = value;
                    this.RaisePropertyChanged("CheckpointType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CT.SRV.SimulatorServiceReference.FlightDTO[] Flights {
            get {
                return this.FlightsField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightsField, value) != true)) {
                    this.FlightsField = value;
                    this.RaisePropertyChanged("Flights");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CT.SRV.SimulatorServiceReference.ProcessDTO Process {
            get {
                return this.ProcessField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessField, value) != true)) {
                    this.ProcessField = value;
                    this.RaisePropertyChanged("Process");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProcessId {
            get {
                return this.ProcessIdField;
            }
            set {
                if ((this.ProcessIdField.Equals(value) != true)) {
                    this.ProcessIdField = value;
                    this.RaisePropertyChanged("ProcessId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Serial {
            get {
                return this.SerialField;
            }
            set {
                if ((this.SerialField.Equals(value) != true)) {
                    this.SerialField = value;
                    this.RaisePropertyChanged("Serial");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessDTO", Namespace="http://schemas.datacontract.org/2004/07/CT.Common.DTO_Models")]
    [System.SerializableAttribute()]
    public partial class ProcessDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CT.SRV.SimulatorServiceReference.CheckpointDTO[] CheckpointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CT.SRV.SimulatorServiceReference.FlightDTO[] FlightsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProcessIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CT.SRV.SimulatorServiceReference.CheckpointDTO[] Checkpoints {
            get {
                return this.CheckpointsField;
            }
            set {
                if ((object.ReferenceEquals(this.CheckpointsField, value) != true)) {
                    this.CheckpointsField = value;
                    this.RaisePropertyChanged("Checkpoints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CT.SRV.SimulatorServiceReference.FlightDTO[] Flights {
            get {
                return this.FlightsField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightsField, value) != true)) {
                    this.FlightsField = value;
                    this.RaisePropertyChanged("Flights");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProcessId {
            get {
                return this.ProcessIdField;
            }
            set {
                if ((this.ProcessIdField.Equals(value) != true)) {
                    this.ProcessIdField = value;
                    this.RaisePropertyChanged("ProcessId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessType {
            get {
                return this.ProcessTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessTypeField, value) != true)) {
                    this.ProcessTypeField = value;
                    this.RaisePropertyChanged("ProcessType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SimulatorServiceReference.ISimService", CallbackContract=typeof(CT.SRV.SimulatorServiceReference.ISimServiceCallback))]
    public interface ISimService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimService/InitializeSimulator", ReplyAction="http://tempuri.org/ISimService/InitializeSimulatorResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CT.Contracts.SimDataContracts.RequestInitializeSimulator))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CT.Contracts.SimDataContracts.ResponseFlightsCollection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CT.Contracts.SimDataContracts.RequestFlightObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CT.Contracts.SimDataContracts.ResponseFlightObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CT.SRV.SimulatorServiceReference.ResponseBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CT.SRV.SimulatorServiceReference.FlightDTO[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CT.SRV.SimulatorServiceReference.FlightDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CT.SRV.SimulatorServiceReference.CheckpointDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CT.SRV.SimulatorServiceReference.ProcessDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CT.SRV.SimulatorServiceReference.CheckpointDTO[]))]
        CT.Contracts.SimDataContracts.ResponseInitializeSimulator InitializeSimulator(CT.Contracts.SimDataContracts.RequestInitializeSimulator req);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimService/GetFlightsCollection", ReplyAction="http://tempuri.org/ISimService/GetFlightsCollectionResponse")]
        CT.Contracts.SimDataContracts.ResponseFlightsCollection GetFlightsCollection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimService/GetFlightObject", ReplyAction="http://tempuri.org/ISimService/GetFlightObjectResponse")]
        CT.Contracts.SimDataContracts.ResponseFlightObject GetFlightObject(CT.Contracts.SimDataContracts.RequestFlightObject req);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISimServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimService/OnStart", ReplyAction="http://tempuri.org/ISimService/OnStartResponse")]
        void OnStart(bool isLoaded);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISimServiceChannel : CT.SRV.SimulatorServiceReference.ISimService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SimServiceClient : System.ServiceModel.DuplexClientBase<CT.SRV.SimulatorServiceReference.ISimService>, CT.SRV.SimulatorServiceReference.ISimService {
        
        public SimServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SimServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SimServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SimServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SimServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public CT.Contracts.SimDataContracts.ResponseInitializeSimulator InitializeSimulator(CT.Contracts.SimDataContracts.RequestInitializeSimulator req) {
            return base.Channel.InitializeSimulator(req);
        }
        
        public CT.Contracts.SimDataContracts.ResponseFlightsCollection GetFlightsCollection() {
            return base.Channel.GetFlightsCollection();
        }
        
        public CT.Contracts.SimDataContracts.ResponseFlightObject GetFlightObject(CT.Contracts.SimDataContracts.RequestFlightObject req) {
            return base.Channel.GetFlightObject(req);
        }
    }
}
